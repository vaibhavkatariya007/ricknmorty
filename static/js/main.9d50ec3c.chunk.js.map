{"version":3,"sources":["core/Footer/index.js","core/HeaderContainer/index.js","core/Loading/index.js","core/Character/index.js","core/SortBy/index.js","core/Filters/index.js","core/Pagination/index.js","core/index.js","redux/reducers.js","redux/cofigureStore.js","containers/index.js","Root.js","serviceWorker.js","index.js","redux/modules/constants.js","redux/modules/actions.js","redux/modules/characters.js","config.js"],"names":["Footer","Date","getFullYear","Header","Layout","HeaderContainer","history","className","onClick","push","antIcon","type","style","fontSize","spin","Loading","props","indicator","spinning","request","tip","children","Character","data","xs","sm","md","lg","xl","src","image","name","id","moment","created","format","status","species","gender","origin","location","Option","Select","Sorting_Options","value","SortBy","sortVisible","onSortVisible","onSortby","sortBy","defaultValue","width","onChange","map","sort","index","key","title","visible","footer","onCancel","Group","e","target","FilterData","Filters","filterVisible","onFilterVisible","onApplyFilter","appliedvalue","orignalData","forEach","includes","renderView","Object","keys","filter","option","onOk","okText","Pagination","prev","next","disabled","appReducer","combineReducers","characters","charactersReducer","rootReducer","state","action","middlewares","thunk","configureStore","initialState","createStore","composeWithDevTools","applyMiddleware","CharactersList","lazy","Root","store","fallback","exact","path","component","to","Boolean","window","hostname","match","__INITIAL_STATE__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","UPDATE_SORT_BY","REQUEST_CHARACTERS","RECEIVE_CHARACTERS","REQUEST_CHARACTERS_ERROR","updateSortBy","sortby","TYPES","payload","requestCharacters","receiveCharacters","handleCharactersError","error","metaData","info","results","fetchCharacters","customURL","dispatch","getState","defaultURL","API","BASE_URL","fetch","response","json","catch","console","log","filterMatch","filters","isPresent","filterType","length","sortData","order","dataHasToSort","_","orderBy"],"mappings":"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","file":"static/js/main.9d50ec3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst Footer = () => (\r\n  <Layout.Footer>\r\n    <span>&copy; Copyright {new Date().getFullYear()}</span>\r\n  </Layout.Footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nimport {Layout, Input} from 'antd';\r\n\r\nconst {Header} = Layout;\r\n\r\nconst HeaderContainer = ({history}) => (\r\n  <Header>\r\n    <span className=\"logo\" onClick={() => history.push('/')}>\r\n      <span className=\"label\">Rick & Morty</span>\r\n    </span>\r\n  </Header>\r\n);\r\n\r\nexport default HeaderContainer;\r\n","import React from 'react';\r\nimport {Spin, Icon} from 'antd';\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{fontSize: 24}} spin />;\r\n\r\nconst Loading = props => (\r\n  <div className=\"loading\">\r\n    <Spin indicator={antIcon} spinning={props.request} tip=\"Loading...\">\r\n      {props.children}\r\n    </Spin>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport {Col} from 'antd';\r\nimport moment from 'moment';\r\nimport './product.css';\r\n\r\nconst Character = ({data}) => {\r\n  return (\r\n    <Col className=\"gutter-row product\" xs={24} sm={12} md={8} lg={6} xl={6}>\r\n      <div className=\"gutter-box\">\r\n        <figure>\r\n          <img src={data.image} className=\"product-image\" />\r\n          <figcaption>\r\n            <span className=\"product-name\">{data.name}</span>\r\n            <span className=\"product-metadata\">\r\n              {`ID ${data.id} - Created On \r\n              ${moment(data.created).format('YYYY MMMM DD')}`}\r\n            </span>\r\n          </figcaption>\r\n        </figure>\r\n        <div className=\"more-information\">\r\n          <div className=\"info-block\">\r\n            <span className=\"label\">Status</span>\r\n            <span className=\"info\">{data && data.status}</span>\r\n          </div>\r\n          <div className=\"info-block\">\r\n            <span className=\"label\">Species</span>\r\n            <span className=\"info\">{data && data.species}</span>\r\n          </div>\r\n          <div className=\"info-block\">\r\n            <span className=\"label\">Gender</span>\r\n            <span className=\"info\">{data && data.gender}</span>\r\n          </div>\r\n          <div className=\"info-block\">\r\n            <span className=\"label\">origin</span>\r\n            <span className=\"info\">\r\n              {data && data.origin && data.origin.name}\r\n            </span>\r\n          </div>\r\n          <div className=\"info-block\">\r\n            <span className=\"label\">Last location</span>\r\n            <span className=\"info\">\r\n              {data && data.location && data.location.name}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import React from 'react';\r\nimport {Modal, Radio, Select} from 'antd';\r\nimport './sortby.css';\r\nconst {Option} = Select;\r\n\r\nconst Sorting_Options = [\r\n  {\r\n    name: 'Ascending',\r\n    value: 'lowToHigh',\r\n  },\r\n  {\r\n    name: 'Descending',\r\n    value: 'highToLow',\r\n  },\r\n];\r\n\r\nconst SortBy = ({sortVisible, onSortVisible, onSortby, sortBy}) => {\r\n  return (\r\n    <div className=\"sorting\">\r\n      <span className=\"label\">Sort By ID</span>\r\n      <Select defaultValue={sortBy} style={{width: 200}} onChange={onSortby}>\r\n        {Sorting_Options.map((sort, index) => (\r\n          <Option key={index} value={sort.value}>\r\n            {sort.name}\r\n          </Option>\r\n        ))}\r\n      </Select>\r\n      <Modal\r\n        title=\"Sort By\"\r\n        visible={sortVisible}\r\n        footer={null}\r\n        onCancel={onSortVisible}>\r\n        <Radio.Group\r\n          onChange={e => {\r\n            onSortby(e.target.value);\r\n            onSortVisible();\r\n          }}\r\n          value={sortBy}>\r\n          {Sorting_Options.map((sort, index) => (\r\n            <Radio key={index} value={sort.value}>\r\n              {sort.name}\r\n            </Radio>\r\n          ))}\r\n        </Radio.Group>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortBy;\r\n","import React from 'react';\r\nimport {Modal} from 'antd';\r\nimport './filters.css';\r\n\r\nconst FilterData = {\r\n  species: [],\r\n  gender: [],\r\n  origin: [],\r\n};\r\n\r\nconst Filters = ({\r\n  filterVisible,\r\n  onFilterVisible,\r\n  onApplyFilter,\r\n  appliedvalue = {},\r\n  orignalData = [],\r\n}) => {\r\n  orignalData.forEach(data => {\r\n    if (!FilterData.species.includes(data.species)) {\r\n      FilterData.species.push(data.species);\r\n    }\r\n    if (!FilterData.gender.includes(data.gender)) {\r\n      FilterData.gender.push(data.gender);\r\n    }\r\n    if (!FilterData.origin.includes(data.origin.name)) {\r\n      FilterData.origin.push(data.origin.name);\r\n    }\r\n  });\r\n\r\n  const renderView = () =>\r\n    FilterData &&\r\n    Object.keys(FilterData).map(filter => {\r\n      return (\r\n        <div className={`filter filter-${filter}`}>\r\n          <span className=\"filter-header\">{filter}</span>\r\n          <div className=\"options\">\r\n            {FilterData[filter].map(option => (\r\n              <span\r\n                className={\r\n                  appliedvalue[filter].includes(option) ? 'selected' : ''\r\n                }\r\n                onClick={() => onApplyFilter(filter, option)}>\r\n                {option}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div className=\"filtering\">\r\n      <span className=\"label\">Filters</span>\r\n      {renderView()}\r\n      <Modal\r\n        title=\"Filter Options\"\r\n        visible={filterVisible}\r\n        onOk={() => onFilterVisible()}\r\n        okText=\"Apply\"\r\n        onCancel={() => onFilterVisible()}>\r\n        {renderView()}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport {Row, Button} from 'antd';\r\n\r\nconst Pagination = ({onClick, data = {}}) => {\r\n  const {prev, next} = data || {};\r\n\r\n  return (\r\n    <Row className=\"pagination\">\r\n      <Button disabled={prev ? false : true} onClick={() => onClick(prev)}>\r\n        Prev\r\n      </Button>\r\n      <span>|</span>\r\n      <Button disabled={next ? false : true} onClick={() => onClick(next)}>\r\n        Next\r\n      </Button>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import Footer from './Footer/';\r\nimport HeaderContainer from './HeaderContainer/';\r\nimport Loading from './Loading/';\r\nimport Character from './Character/';\r\nimport SortBy from './SortBy/';\r\nimport Filters from './Filters/';\r\nimport Pagination from './Pagination/';\r\n\r\nexport {\r\n  HeaderContainer,\r\n  Footer,\r\n  Filters,\r\n  Character,\r\n  Loading,\r\n  SortBy,\r\n  Pagination,\r\n};\r\n","import {combineReducers} from 'redux';\r\n\r\nimport charactersReducer from './modules/characters';\r\n\r\nconst appReducer = combineReducers({\r\n  characters: charactersReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => appReducer(state, action);\r\n\r\nexport default rootReducer;\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nlet middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nconst configureStore = initialState => {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middlewares))\r\n  );\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import {lazy} from 'react';\r\n\r\nconst CharactersList = lazy(() => import('./CharactersList'));\r\n\r\nexport {CharactersList};\r\n","import React, {Suspense} from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nimport {Loading} from './core';\r\n\r\nimport {CharactersList} from './containers';\r\n\r\nconst Root = ({store}) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Suspense fallback={<Loading />}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={CharactersList} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './redux/cofigureStore';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nconst persistedState = window.__INITIAL_STATE__;\nconst store = configureStore(persistedState);\n\nReactDOM.render(<Root store={store} />, document.getElementById('root'));\nserviceWorker.unregister();\n","export const UPDATE_SORT_BY = 'UPDATE_SORT_BY';\r\nexport const REQUEST_CHARACTERS = 'REQUEST_CHARACTERS';\r\nexport const RECEIVE_CHARACTERS = 'RECEIVE_CHARACTERS';\r\nexport const REQUEST_CHARACTERS_ERROR = 'REQUEST_CHARACTERS_ERROR';\r\n","import * as TYPES from './constants';\r\n\r\nexport const updateSortBy = sortby => ({\r\n  type: TYPES.UPDATE_SORT_BY,\r\n  payload: sortby,\r\n});\r\n\r\nexport const requestCharacters = () => ({\r\n  type: TYPES.REQUEST_CHARACTERS,\r\n});\r\n\r\nexport const receiveCharacters = data => ({\r\n  type: TYPES.RECEIVE_CHARACTERS,\r\n  payload: data,\r\n});\r\n\r\nexport const handleCharactersError = error => ({\r\n  type: TYPES.REQUEST_CHARACTERS_ERROR,\r\n  payload: error,\r\n});\r\n","import * as TYPES from './constants';\r\nimport {API} from '../../config';\r\n\r\nimport {\r\n  requestCharacters,\r\n  receiveCharacters,\r\n  handleCharactersError,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  error: null,\r\n  request: false,\r\n  data: [],\r\n  metaData: null,\r\n  sortBy: 'lowToHigh',\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TYPES.REQUEST_CHARACTERS:\r\n      return {\r\n        ...state,\r\n        request: true,\r\n      };\r\n    case TYPES.RECEIVE_CHARACTERS:\r\n      return {\r\n        ...state,\r\n        metaData: action.payload && action.payload.info,\r\n        data: action.payload && action.payload.results,\r\n        request: false,\r\n        error: false,\r\n      };\r\n    case TYPES.REQUEST_CHARACTERS_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n        request: false,\r\n      };\r\n    case TYPES.UPDATE_SORT_BY:\r\n      return {\r\n        ...state,\r\n        sortBy: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const fetchCharacters = customURL => (dispatch, getState) => {\r\n  let defaultURL = API.BASE_URL;\r\n  dispatch(requestCharacters());\r\n  try {\r\n    return fetch(customURL || defaultURL)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        if (response) {\r\n          dispatch(receiveCharacters(response));\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        dispatch(handleCharactersError(error));\r\n      });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch(handleCharactersError(error));\r\n  }\r\n};\r\n","import _ from 'lodash';\r\nexport const API = {BASE_URL: 'https://rickandmortyapi.com/api/character/'};\r\n\r\nexport const filterMatch = (filters, data) => {\r\n  let isPresent = true;\r\n\r\n  filters &&\r\n    Object.keys(filters).forEach(filterType => {\r\n      if (filterType === 'origin') {\r\n        if (\r\n          filters.origin.length &&\r\n          !filters.origin.includes(data.origin.name)\r\n        ) {\r\n          isPresent = false;\r\n        }\r\n      } else if (\r\n        filters[filterType].length &&\r\n        !filters[filterType].includes(data[filterType])\r\n      ) {\r\n        isPresent = false;\r\n      }\r\n    });\r\n  return isPresent;\r\n};\r\n\r\nexport const sortData = (order, dataHasToSort) => {\r\n  return (\r\n    dataHasToSort &&\r\n    dataHasToSort.length > 0 &&\r\n    _.orderBy(\r\n      dataHasToSort,\r\n      function(e) {\r\n        return e.id;\r\n      },\r\n      [order]\r\n    )\r\n  );\r\n};\r\n"],"sourceRoot":""}